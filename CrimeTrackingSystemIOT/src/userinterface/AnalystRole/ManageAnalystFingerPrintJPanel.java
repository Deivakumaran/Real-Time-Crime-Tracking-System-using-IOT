/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AnalystRole;

import Business.Enterprise.Enterprise;
import Business.Organization.AnalystOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabFingerPrintRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Image;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author deivakumaran
 */
public class ManageAnalystFingerPrintJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageFingerPrintJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Enterprise enterprise;
    private AnalystOrganization analystOrganization;

    ManageAnalystFingerPrintJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, AnalystOrganization analystOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account = account;
        this.analystOrganization = analystOrganization;
        populateTable();

    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) fingerTable.getModel();
        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getName().equalsIgnoreCase(Organization.Type.Analyst.getValue())) {

                for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    if ((request.getName()).equals(WorkRequest.Type.FingerPrint.getValue())) {

                        Object[] row = new Object[4];
                        row[0] = request;
                        int caseID = ((LabFingerPrintRequest) request).getCaseID();
                        row[1] = caseID;
                        row[2] = request.getSender();
                        row[3] = request.getStatus();
                        model.addRow(row);
                    }
                }

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fingerTable = new javax.swing.JTable();
        UploadBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        imageTextPane = new javax.swing.JTextPane();
        submitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        requestLabButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        caseIDTextField = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(196, 232, 255));

        aLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        fingerTable.setBackground(new java.awt.Color(225, 244, 255));
        fingerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Case ID", "Sender", "Status"
            }
        ));
        fingerTable.setSelectionForeground(new java.awt.Color(224, 244, 255));
        fingerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(fingerTable);

        UploadBtn.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        UploadBtn.setText("Upload");
        UploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadBtnActionPerformed(evt);
            }
        });

        imageTextPane.setEnabled(false);
        jScrollPane4.setViewportView(imageTextPane);

        submitButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 24)); // NOI18N
        jLabel1.setText("Manage Finger Print");

        jLabel2.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        jLabel2.setText("Case ID");

        requestLabButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        requestLabButton.setText("Send Request to Lab");
        requestLabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestLabButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        backButton.setText("<<BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        caseIDTextField.setEnabled(false);

        deleteButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(571, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(backButton)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(UploadBtn, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(caseIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(submitButton)
                                        .addGap(57, 57, 57)
                                        .addComponent(deleteButton)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(requestLabButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(110, 110, 110)
                                        .addComponent(aLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(523, 523, 523))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(710, 710, 710))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(caseIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UploadBtn))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submitButton)
                            .addComponent(requestLabButton)
                            .addComponent(backButton)
                            .addComponent(deleteButton)))
                    .addComponent(aLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(446, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadBtnActionPerformed
        // TODO add your handling code here:

        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String file = f.getAbsolutePath();
        imageTextPane.setText(file);
        //setting the image into the frame
        ImageIcon image;
        image = new ImageIcon(new ImageIcon(file).getImage().getScaledInstance(83, 95, Image.SCALE_DEFAULT));
        aLabel.setIcon(image);


    }//GEN-LAST:event_UploadBtnActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        if (imageTextPane.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Complete all required fields", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String file = imageTextPane.getText();

        //setting the image into the frame
        ImageIcon image;
        image = new ImageIcon(new ImageIcon(file).getImage().getScaledInstance(83, 95, Image.SCALE_DEFAULT));
        LabFingerPrintRequest labFingerPrintRequest = new LabFingerPrintRequest();
        labFingerPrintRequest.setMessage("Process FingerPrints");
        labFingerPrintRequest.setImage(image);
        labFingerPrintRequest.setSender(account);
        caseIDTextField.setText(String.valueOf(labFingerPrintRequest.getCaseID()));
        labFingerPrintRequest.setStatus("New");

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof AnalystOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(labFingerPrintRequest);
            if (labFingerPrintRequest.getName().equals(WorkRequest.Type.FingerPrint.getValue())) {
                account.getWorkQueue().getWorkRequestList().add(labFingerPrintRequest);
            }
        }
        JOptionPane.showMessageDialog(this, "Submitted");

        populateTable();
        imageTextPane.setText("");
        caseIDTextField.setText("");
        aLabel.setIcon(null);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void requestLabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestLabButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = fingerTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No row was selected");
            return;
        }

        String file = imageTextPane.getText();
        //setting the image into the frame
        ImageIcon image;
        image = new ImageIcon(new ImageIcon(file).getImage().getScaledInstance(83, 95, Image.SCALE_DEFAULT));
        LabFingerPrintRequest labFingerPrintRequest = (LabFingerPrintRequest) fingerTable.getValueAt(selectedRow, 0);

        if (labFingerPrintRequest.getStatus().equals("New")) {

            labFingerPrintRequest.setMessage("Process FingerPrints");
            labFingerPrintRequest.setImage(labFingerPrintRequest.getImage());
            labFingerPrintRequest.setSender(account);
            labFingerPrintRequest.setCaseID(labFingerPrintRequest.getCaseID());
            labFingerPrintRequest.setStatus("Sent");

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof LabOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(labFingerPrintRequest);
                account.getWorkQueue().getWorkRequestList().add(labFingerPrintRequest);
            }
            JOptionPane.showMessageDialog(this, "Request Sent");
            populateTable();

        } else if (labFingerPrintRequest.getStatus().equalsIgnoreCase("Sent")) {
            JOptionPane.showMessageDialog(this, "Already Sent", "WARNING", JOptionPane.WARNING_MESSAGE);

        } else {
            JOptionPane.showMessageDialog(this, "Already Sent", "WARNING", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_requestLabButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int row = fingerTable.getSelectedRow();

        if (row >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to delete the row for sure?", "WARNING", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                LabFingerPrintRequest labFingerPrintRequest = (LabFingerPrintRequest) fingerTable.getValueAt(row, 0);
                analystOrganization.getWorkQueue().getWorkRequestList().remove(labFingerPrintRequest);
                populateTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No row was selected");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UploadBtn;
    private javax.swing.JLabel aLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField caseIDTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable fingerTable;
    private javax.swing.JTextPane imageTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton requestLabButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}

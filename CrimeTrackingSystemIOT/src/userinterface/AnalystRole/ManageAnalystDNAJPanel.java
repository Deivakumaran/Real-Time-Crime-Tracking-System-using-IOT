/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AnalystRole;

import Business.Enterprise.Enterprise;
import Business.Organization.AnalystOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DNARequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author deivakumaran
 */
public class ManageAnalystDNAJPanel extends javax.swing.JPanel {

    /**
     * Creates new form manageDNAJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Enterprise enterprise;
    private AnalystOrganization analystOrganization;

    ManageAnalystDNAJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, AnalystOrganization analystOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account = account;
        this.analystOrganization = analystOrganization;
        populateTable();

    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) DNATable.getModel();
        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getName().equalsIgnoreCase(Organization.Type.Analyst.getValue())) {

                for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    if ((request.getName()).equals(WorkRequest.Type.DNA.getValue())) {

                        Object[] row = new Object[5];
                        row[0] = request;
                        int caseID = ((DNARequest) request).getCaseID();
                        row[1] = caseID;
                        row[2] = request.getSender();
                        row[3] = request.getStatus();
                        String sample = ((DNARequest) request).getSample();
                        row[4] = sample;
                        model.addRow(row);
                    }
                }

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DNATable = new javax.swing.JTable();
        caseIDTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sampleComboBox = new javax.swing.JComboBox();
        submitButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        requestLabButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(196, 232, 255));

        jLabel2.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        jLabel2.setText("Request Number");

        DNATable.setBackground(new java.awt.Color(196, 232, 255));
        DNATable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Request Number", "Sender", "Status", "Sample"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DNATable.setSelectionForeground(new java.awt.Color(224, 244, 255));
        DNATable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(DNATable);

        caseIDTextField.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 24)); // NOI18N
        jLabel1.setText("Manage DNA");

        jLabel3.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        jLabel3.setText("Sample");

        sampleComboBox.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        sampleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hair", "Blood", "Nail", "Skin", " " }));

        submitButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AnalystRole/Back3Blue.png"))); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        requestLabButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        requestLabButton.setText("Send Request to Lab");
        requestLabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestLabButtonActionPerformed(evt);
            }
        });

        viewButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(627, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(requestLabButton)
                        .addGap(578, 578, 578))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(264, 264, 264)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(80, 80, 80)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sampleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(caseIDTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(70, 70, 70)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(407, 407, 407))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(caseIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sampleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(viewButton)
                    .addComponent(submitButton))
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestLabButton))
                .addContainerGap(415, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:

        DNARequest dnaRequest = new DNARequest();
        dnaRequest.setMessage("Process DNA");
        dnaRequest.setSample((String) sampleComboBox.getSelectedItem());
        dnaRequest.setSender(account);
        caseIDTextField.setText(String.valueOf(dnaRequest.getCaseID()));
        dnaRequest.setStatus("New");

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof AnalystOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(dnaRequest);
            if (dnaRequest.getName().equals(WorkRequest.Type.FingerPrint.getValue())) {
                account.getWorkQueue().getWorkRequestList().add(dnaRequest);
            }

        }
        JOptionPane.showMessageDialog(this, "Submitted");

        populateTable();
        caseIDTextField.setText("");
    }//GEN-LAST:event_submitButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int row = DNATable.getSelectedRow();

        if (row >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to delete the row for sure?", "WARNING", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                DNARequest dnaRequest = (DNARequest) DNATable.getValueAt(row, 0);
                analystOrganization.getWorkQueue().getWorkRequestList().remove(dnaRequest);
                populateTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No row was selected");
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void requestLabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestLabButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = DNATable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No row was selected");
            return;
        }

        DNARequest dnaRequest = (DNARequest) DNATable.getValueAt(selectedRow, 0);

        if (dnaRequest.getStatus().equals("New")) {
            dnaRequest.setMessage("Process DNA");
            dnaRequest.setSample(dnaRequest.getSample());
            dnaRequest.setSender(account);
            dnaRequest.setCaseID(dnaRequest.getCaseID());
            dnaRequest.setStatus("Sent");

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof LabOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(dnaRequest);
                if (dnaRequest.getName().equals(WorkRequest.Type.DNA.getValue())) {
                    account.getWorkQueue().getWorkRequestList().add(dnaRequest);
                }

            }
            JOptionPane.showMessageDialog(this, "Request Sent");
            populateTable();

        } else if (dnaRequest.getStatus().equalsIgnoreCase("Sent")) {
            JOptionPane.showMessageDialog(this, "Request has been already sent", "WARNING", JOptionPane.WARNING_MESSAGE);

        } else {
            JOptionPane.showMessageDialog(this, "Processed requests cannot be sent", "WARNING", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_requestLabButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = DNATable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No row was selected");
            return;
        }

        DNARequest dnaRequest = (DNARequest) DNATable.getValueAt(selectedRow, 0);
        if (dnaRequest.getStatus().equals("Processed")) {
            ViewDNAJPanel viewDNAJPanel = new ViewDNAJPanel(userProcessContainer, dnaRequest, enterprise, account);
            userProcessContainer.add("ViewDNAJPanel", viewDNAJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        } else {
            JOptionPane.showMessageDialog(this, "Only processed requests can be viewed");
        }
    }//GEN-LAST:event_viewButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DNATable;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField caseIDTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton requestLabButton;
    private javax.swing.JComboBox sampleComboBox;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
